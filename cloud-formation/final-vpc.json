{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "HR-TEST-VPC-1",
	"Parameters": {
		"vpcCidr": {
			"Description": "VPC CIDR block.",
			"Type": "String",
			"Default": "10.0.0.0/26",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"publicSubnetCidr": {
			"Description": "Public subnet CIDR block.",
			"Type": "String",
			"Default": "10.0.0.0/27",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"privateSubnetCidr": {
			"Description": "Private subnet CIDR block.",
			"Type": "String",
			"Default": "10.0.0.32/27",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"SSHLocation": {
			"Description": " The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
		"keyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "255",
			"AllowedPattern": "[\\x20-\\x7E]*",
			"ConstraintDescription": "can contain only ASCII characters."
		},
		"instanceType": {
			"Description": "WebServer EC2 instance type >= t2.medium",
			"Type": "String",
			"Default": "t2.medium",
			"AllowedValues": ["t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge",
				"m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge",
				"c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge",
				"i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"dbinstanceType": {
			"Description": "databaseServer EC2 instance type",
			"Type": "String",
			"Default": "t2.medium",
			"AllowedValues": ["t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge",
				"m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge",
				"c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge",
				"i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"DBUser": {
			"Type": "String",
			"Description": "Database admin username"
		},
		"DBPassword": {
			"Type": "String",
			"NoEcho": "true",
			"Description": "Database admin password",
			"MinLength": "8"
		},
		"DBInstanceClass": {
			"Description": "The database instance type",
			"Type": "String",
			"Default": "db.t2.small",
			"AllowedValues": [
				"db.t1.micro",
				"db.m1.small",
				"db.m1.medium",
				"db.m1.large",
				"db.m1.xlarge",
				"db.m2.xlarge",
				"db.m2.2xlarge",
				"db.m2.4xlarge",
				"db.m3.medium",
				"db.m3.large",
				"db.m3.xlarge",
				"db.m3.2xlarge",
				"db.m4.large",
				"db.m4.xlarge",
				"db.m4.2xlarge",
				"db.m4.4xlarge",
				"db.m4.10xlarge",
				"db.r3.large",
				"db.r3.xlarge",
				"db.r3.2xlarge",
				"db.r3.4xlarge",
				"db.r3.8xlarge",
				"db.m2.xlarge",
				"db.m2.2xlarge",
				"db.m2.4xlarge",
				"db.cr1.8xlarge",
				"db.t2.micro",
				"db.t2.small",
				"db.t2.medium",
				"db.t2.large"
			]
		},
		"DBName": {
			"Type": "String",
			"Description": "Database name"
		},
		"mongoPort": {
			"Description": "Mongo DB port",
			"Type": "Number",
			"Default": "27017"
		},
		"redisPort": {
			"Description": "redis DB port",
			"Type": "Number",
			"Default": "6379"
		},
		"memcachedPort": {
			"Description": "memcached port",
			"Type": "Number",
			"Default": "11211"
		},
		"elasticPort": {
			"Description": "elastic search port",
			"Type": "Number",
			"Default": "9200"
		},
		"queueName": {
			"Description": "SQS Queue name",
			"Type": "String",
			"Default": "hackerrank"
		}
	},
	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"instance": "ami-8e675ff4",
				"memcached": "ami-43a15f3e",
				"mongo": "ami-43a15f3e",
				"redis": "ami-43a15f3e",
				"elastic": "ami-43a15f3e",
				"bastion": "ami-43a15f3e"
			},
			"us-west-1": {
				"instance": "ami-8e675ff4",
				"memcached": "ami-43a15f3e",
				"mongo": "ami-43a15f3e",
				"redis": "ami-43a15f3e",
				"elastic": "ami-43a15f3e",
				"bastion": "ami-43a15f3e"
			},
			"ap-south-1": {
				"instance": "ami-8e675ff4",
				"memcached": "ami-43a15f3e",
				"mongo": "ami-43a15f3e",
				"redis": "ami-43a15f3e",
				"elastic": "ami-43a15f3e",
				"bastion": "ami-43a15f3e"
			},
			"ap-southeast-1": {
				"instance": "ami-8e675ff4",
				"memcached": "ami-43a15f3e",
				"mongo": "ami-43a15f3e",
				"redis": "ami-43a15f3e",
				"elastic": "ami-43a15f3e",
				"bastion": "ami-43a15f3e"
			}
		}
	},
	"Resources": {
		"vpc": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "vpcCidr"
				},
				"InstanceTenancy": "default",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-VPC"
				}]
			}
		},
		"publicSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "publicSubnetCidr"
				},
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"MapPublicIpOnLaunch": "true",
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-PUBLIC-SUBNET-1"
				}]
			}
		},
		"privateSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "privateSubnetCidr"
				},
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-PRIVATE-SUBNET-1"
				}]
			}
		},
		"inetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-INETGATEWAY"
				}]
			}
		},
		"attachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"DependsOn": ["vpc", "inetGateway"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"InternetGatewayId": {
					"Ref": "inetGateway"
				}
			}
		},
		"publicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"DependsOn": ["vpc"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-RT-PUBLIC-1"
				}]
			}
		},
		"publicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": ["inetGateway"],
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"RouteTableId": {
					"Ref": "publicRouteTable"
				},
				"GatewayId": {
					"Ref": "inetGateway"
				}
			}
		},
		"subnetRouteTableAssociationPublic": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"RouteTableId": {
					"Ref": "publicRouteTable"
				}
			}
		},
		"privateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"DependsOn": ["vpc"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-RT-PRIVATE-1"
				}]
			}
		},
		"subnetRouteTableAssociationPrivate": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"RouteTableId": {
					"Ref": "privateRouteTable"
				}
			}
		},
		"NATGatewayEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"NATGateway": {
			"Type": "AWS::EC2::NatGateway",
			"DependsOn": "attachGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"NATGatewayEIP",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "publicSubnet"
				}
			}
		},
		"privateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "privateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NATGateway"
				}
			}
		},
		"instanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"nginxSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "8090",
						"ToPort": "8090",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "3000",
						"ToPort": "3000",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"memcachedSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable memcached access via port 11211",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": {
						"Ref": "memcachedPort"
					},
					"ToPort": {
						"Ref": "memcachedPort"
					},
					"SourceSecurityGroupId": {
						"Ref": "instanceSecurityGroup"
					}
				}]
			}
		},
		"mongoSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable mongo access via port 27017",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": {
						"Ref": "mongoPort"
					},
					"ToPort": {
						"Ref": "mongoPort"
					},
					"SourceSecurityGroupId": {
						"Ref": "instanceSecurityGroup"
					}
				}]
			}
		},
		"redisSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable redis access via port 6379",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": {
						"Ref": "redisPort"
					},
					"ToPort": {
						"Ref": "redisPort"
					},
					"SourceSecurityGroupId": {
						"Ref": "instanceSecurityGroup"
					}
				}]
			}
		},
		"elasticSearchSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable elastic access via port 9200",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": {
						"Ref": "elasticPort"
					},
					"ToPort": {
						"Ref": "elasticPort"
					},
					"SourceSecurityGroupId": {
						"Ref": "instanceSecurityGroup"
					}
				}]
			}
		},
		"EC2S3Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "root",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
								"Action": "ec2:*",
								"Effect": "Allow",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "elasticloadbalancing:*",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "cloudwatch:*",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "autoscaling:*",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "iam:CreateServiceLinkedRole",
								"Resource": "*",
								"Condition": {
									"StringEquals": {
										"iam:AWSServiceName": [
											"autoscaling.amazonaws.com",
											"ec2scheduled.amazonaws.com",
											"elasticloadbalancing.amazonaws.com",
											"spot.amazonaws.com",
											"spotfleet.amazonaws.com"
										]
									}
								}
							},
							{
								"Effect": "Allow",
								"Action": "s3:*",
								"Resource": "*"
							}
						]
					}
				}]
			}
		},
		"EC2S3InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "EC2S3Role"
				}]
			}
		},
		"webServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Node(client) with boot.sh copied from s3"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "instance"]
				},
				"SecurityGroupIds": [{
					"Ref": "instanceSecurityGroup"
				},{
					"Ref": "nginxSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "EC2S3InstanceProfile"
				},
				"Tags": [{
						"Key": "Environment",
						"Value": "production"
					},
					{
						"Key": "Name",
						"Value": "nodetest"
					},
					{
						"Key": "Role",
						"Value": "webserver"
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"echo userdata script start\n",
							"curl -L https://omnitruck.chef.io/install.sh | sudo bash -s -- -v 12.9.41\n",
							"aws s3 cp s3://hacker-rank-devops-dev/boot.sh /home/ubuntu/ --region=us-east-1\n",
                            "aws s3 cp s3://hacker-rank-devops-dev/nginx.conf /etc/nginx/ --region=us-east-1\n",                            
							"bash /home/ubuntu/boot.sh\n",
							"pwd\n",
							"echo 'search local' >> /etc/resolv.conf\n",
							"su ubuntu << 'EOF'\n",
							"   aws s3 cp s3://hacker-rank-devops-dev/node ~/.ssh/ --region=us-east-1\n",
							"   aws s3 cp s3://hacker-rank-devops-dev/node.pub ~/.ssh/ --region=us-east-1\n",
							"   chmod 600 ~/.ssh/node\n",
							"   chmod 600 ~/.ssh/node.pub\n",
							"   eval \"$(ssh-agent -s)\"\n",
							"   ssh-add ~/.ssh/node\n",
							"EOF\n",
							"cat << EOF > /home/ubuntu/.ssh/config\n",
							"   host github.com\n",
							"       HostName github.com\n",
							"       IdentityFile ~/.ssh/node\n",
							"       User git\n",
							"       StrictHostKeyChecking no\n",
                            "EOF\n",
							"su ubuntu << 'EOF'\n",
							"   pwd\n",
							"   cd /home/ubuntu/\n",
							"   pwd\n",
							"   source /home/ubuntu/.rvm/scripts/rvm\n",
							"   rvm use ruby-2.4.2\n",
							"   git clone git@github.com:AbhiramGottimukkula/hackerrank.git\n",
							"   aws s3 cp s3://hacker-rank-devops-dev/run-code.sh /home/ubuntu/ --region=us-east-1\n",
							"   bash /home/ubuntu/run-code.sh\n",
							"EOF"
						]]
					}
				}
			}
		},
		"workerServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Node(client) with boot.sh copied from s3"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "instance"]
				},
				"SecurityGroupIds": [{
					"Ref": "instanceSecurityGroup"
				},{
					"Ref": "nginxSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "EC2S3InstanceProfile"
				},
				"Tags": [{
						"Key": "Environment",
						"Value": "production"
					},
					{
						"Key": "Name",
						"Value": "workertest"
					},
					{
						"Key": "Role",
						"Value": "workerserver"
					},
					{
						"Key": "Datadog",
						"Value": "on"
					},
					{
						"Key": "Owner",
						"Value": "hackerrank"
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"echo userdata script start\n",
							"curl -L https://omnitruck.chef.io/install.sh | sudo bash -s -- -v 12.9.41\n",
							"aws s3 cp s3://hacker-rank-devops-dev/boot.sh /home/ubuntu/ --region=us-east-1\n",
                            "aws s3 cp s3://hacker-rank-devops-dev/nginx.conf /etc/nginx/ --region=us-east-1\n",                            
							"bash /home/ubuntu/boot.sh\n",
							"pwd\n",
							"echo 'search local' >> /etc/resolv.conf\n",
							"su ubuntu << 'EOF'\n",
							"   aws s3 cp s3://hacker-rank-devops-dev/node ~/.ssh/ --region=us-east-1\n",
							"   aws s3 cp s3://hacker-rank-devops-dev/node.pub ~/.ssh/ --region=us-east-1\n",
							"   chmod 600 ~/.ssh/node\n",
							"   chmod 600 ~/.ssh/node.pub\n",
							"   eval \"$(ssh-agent -s)\"\n",
							"   ssh-add ~/.ssh/node\n",
							"EOF\n",
							"cat << EOF > /home/ubuntu/.ssh/config\n",
							"   host github.com\n",
							"       HostName github.com\n",
							"       IdentityFile ~/.ssh/node\n",
							"       User git\n",
							"       StrictHostKeyChecking no\n",
                            "EOF\n",
							"su ubuntu << 'EOF'\n",
							"   pwd\n",
							"   cd /home/ubuntu/\n",
							"   pwd\n",
							"   source /home/ubuntu/.rvm/scripts/rvm\n",
							"   rvm use ruby-2.4.2\n",
							"   git clone git@github.com:AbhiramGottimukkula/hackerrank.git\n",
							"   aws s3 cp s3://hacker-rank-devops-dev/run-code.sh /home/ubuntu/ --region=us-east-1\n",
							"   bash /home/ubuntu/run-code.sh\n",
							"EOF"
						]]
					}
				}
			}
		},
		"bastionServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Copy the Backup Script and Work on the content."
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "bastion"]
				},
				"SecurityGroupIds": [{
					"Ref": "instanceSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "EC2S3InstanceProfile"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "bastion-server"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
                            "apt-get update\n",
                            "apt-get install -y python2.7 python-pip\n",
                            "pip install awscli --upgrade --user\n",
                            "export PATH=~/.local/bin:$PATH\n",
                            "source ~/.bashrc\n",
                            "aws s3 ls\n",
							"apt-get install -y mysql-client\n",
							"pwd\n",
							"aws s3 cp s3://hacker-rank-devops-dev/allhkdbdump.sql . --region=us-east-1\n",
							"mysql -h ", {
								"Fn::GetAtt": ["RDSInstance", "Endpoint.Address"]
							}, " -u", {
								"Ref": "DBUser"
							}, " -p", {
								"Ref": "DBPassword"
							}, " ", {
								"Ref": "DBName"
							}, " < allhkdbdump.sql --force\n"
						]]
					}
				}
			}
		},
		"memcachedServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "memcached server"
			},
			"DependsOn": ["privateRoute", "NATGateway"],
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "memcached"]
				},
				"SecurityGroupIds": [{
					"Ref": "memcachedSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "dbinstanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "memcached-database"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"apt-get update\n",
							"apt-get install memcached\n",
							"apt-get install -y libmemcached-tools\n",
							"sed -i 's/127.0.0.1/0.0.0.0/g' /etc/memcached.conf \n",
							"service memcached restart\n"
						]]
					}
				}
			}
		},
		"mongoServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Mongo Database"
			},
			"DependsOn": ["privateRoute", "NATGateway"],
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "mongo"]
				},
				"SecurityGroupIds": [{
					"Ref": "mongoSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "dbinstanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "mongo-database"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\n",
							"echo \"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\n",
							"apt-get update\n",
							"apt-get install -y mongodb-org\n",
							"service mongod start\n",
							"sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mongod.conf\n",
							"service mongod restart\n"
						]]
					}
				}
			}
		},
		"redisServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Redis Database"
			},
			"DependsOn": ["privateRoute", "NATGateway"],
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "redis"]
				},
				"SecurityGroupIds": [{
					"Ref": "redisSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "dbinstanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "redis-database"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"apt-get update\n",
							"apt-get install -y redis-server\n",
							"sed -i 's/127.0.0.1/0.0.0.0/g' /etc/redis/redis.conf\n",
							"service redis restart\n"
						]]
					}
				}
			}
		},
		"elasticSearchServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Elastic Search"
			},
			"DependsOn": ["privateRoute", "NATGateway"],
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "elastic"]
				},
				"SecurityGroupIds": [{
					"Ref": "elasticSearchSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "dbinstanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "elastic search"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"apt-get update\n",
							"apt-get install -y default-jre\n",
							"wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -\n",
							"apt-get install -y apt-transport-https\n",
							"echo \"deb https://artifacts.elastic.co/packages/6.x/apt stable main\" | tee -a /etc/apt/sources.list.d/elastic-6.x.list\n",
							"apt-get update \n",
							"apt-get install elasticsearch\n",
							"sed -i 's/#network.host: 192.168.0.1/network.host: 0.0.0.0/g' /etc/elasticsearch/elasticsearch.yml\n",
							"service elasticsearch restart\n"
						]]
					}
				}
			}
		},
		"databaseSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "This subnet group for DB",
				"SubnetIds": [{
						"Ref": "privateSubnet"
					},
					{
						"Ref": "publicSubnet"
					}
				]
			}
		},
		"databaseSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable MySQL access from web servers. Only used in *test* environment",
				"VpcId": {
					"Ref": "vpc"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {
						"Ref": "instanceSecurityGroup"
					}
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "sgdb"
				}]
			}
		},
		"RDSInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"AllocatedStorage": "100",
				"DBSubnetGroupName": {
					"Ref": "databaseSubnetGroup"
				},
				"DBInstanceClass": {
					"Ref": "DBInstanceClass"
				},
				"Engine": "MySQL",
				"EngineVersion": "5.7.21",
				"MasterUsername": {
					"Ref": "DBUser"
				},
				"MasterUserPassword": {
					"Ref": "DBPassword"
				},
				"DBName": {
					"Ref": "DBName"
				},
				"VPCSecurityGroups": [{
					"Ref": "databaseSecurityGroup"
				}]
			}
		},
		"SQSQueue":{
			"Type" : "AWS::SQS::Queue",
			"Properties" : {
			   "QueueName": {"Ref":"queueName"}
			}
		},
		"DNS": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
              "HostedZoneConfig": {
                "Comment": "My hosted zone for local"
              },
              "Name": "local",
              "VPCs": [{
                "VPCId": {
					"Ref": "vpc"
				},
                "VPCRegion": { "Ref" : "AWS::Region" }
              }],
              "HostedZoneTags" : [{
                "Key": "Name",
                "Value": "local"
              }]
            }
		},
		"mysqlDNSRecord" : {
			"Type" : "AWS::Route53::RecordSet",
			"DependsOn": ["RDSInstance"],		
            "Properties" : {
               "HostedZoneId" : { "Ref" : "DNS" },
               "Name" : "db.local",
               "Type" : "CNAME",
               "TTL" : "900",
               "ResourceRecords" : [
				{ "Fn::GetAtt": ["RDSInstance", "Endpoint.Address"]}
               ]
            }
		},
		"redisDNSRecord" : {
			"Type" : "AWS::Route53::RecordSet",
			"DependsOn": ["redisServerInstance"],					
            "Properties" : {
               "HostedZoneId" : { "Ref" : "DNS" },
               "Name" : "redis.local",
               "Type" : "A",
               "TTL" : "900",
               "ResourceRecords" : [
				{ "Fn::GetAtt": ["redisServerInstance", "PrivateIp"]}
               ]
            }
		},
		"memcachedDNSRecord" : {
			"Type" : "AWS::Route53::RecordSet",
			"DependsOn": ["memcachedServerInstance"],								
            "Properties" : {
               "HostedZoneId" : { "Ref" : "DNS" },
               "Name" : "memcached.local",
               "Type" : "A",
               "TTL" : "900",
               "ResourceRecords" : [
				{ "Fn::GetAtt": ["memcachedServerInstance", "PrivateIp"]}
               ]
            }
		},
		"mongoDNSRecord" : {
			"Type" : "AWS::Route53::RecordSet",
			"DependsOn": ["mongoServerInstance"],											
            "Properties" : {
               "HostedZoneId" : { "Ref" : "DNS" },
               "Name" : "mongodb.local",
               "Type" : "A",
               "TTL" : "900",
               "ResourceRecords" : [
				{ "Fn::GetAtt": ["mongoServerInstance", "PrivateIp"]}
               ]
            }
		},
		"sqsDNSRecord" : {
			"Type" : "AWS::Route53::RecordSet",
			"DependsOn": ["SQSQueue"],														
            "Properties" : {
               "HostedZoneId" : { "Ref" : "DNS" },
               "Name" : "sqs.local",
               "Type" : "CNAME",
               "TTL" : "900",
               "ResourceRecords" : [
				{ "Ref": "SQSQueue"}
               ]
            }
		},
		"elasticDNSRecord" : {
			"Type" : "AWS::Route53::RecordSet",
			"DependsOn": ["elasticSearchServerInstance"],																	
            "Properties" : {
               "HostedZoneId" : { "Ref" : "DNS" },
               "Name" : "elastic.local",
               "Type" : "A",
               "TTL" : "900",
               "ResourceRecords" : [
				{ "Fn::GetAtt": ["elasticSearchServerInstance", "PrivateIp"]}
               ]
            }
		}
	},
	"Outputs": {

	}
}