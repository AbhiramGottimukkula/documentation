{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "HR-TEST-VPC-1",
	"Parameters": {
		"vpcCidr": {
			"Description": "VPC CIDR block.",
			"Type": "String",
			"Default": "10.0.0.0/26",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"publicSubnetCidr": {
			"Description": "Public subnet CIDR block.",
			"Type": "String",
			"Default": "10.0.0.0/27",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"privateSubnetCidr": {
			"Description": "Private subnet CIDR block.",
			"Type": "String",
			"Default": "10.0.0.32/27",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"SSHLocation": {
			"Description": "The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
		"instanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "m1.small",
			"AllowedValues": ["t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"rdsInstanceType": {
			"Description": "",
			"Type": "String",
			"Default": "db.t2.small",
			"AllowedValues": ["db.t2.small"],
			"ConstraintDescription": "must select a valid database instance type"
		},
		"keyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "255",
			"AllowedPattern": "[\\x20-\\x7E]*",
			"ConstraintDescription": "can contain only ASCII characters."
		},
		"databaseUsername": {
			"AllowedPattern": "[a-zA-Z0-9]+",
			"ConstraintDescription": "",
			"Description": "",
			"MaxLength": "16",
			"MinLength": "1",
			"Type": "String"
		},
		"databasePassword": {
			"AllowedPattern": "[a-zA-Z0-9]+",
			"ConstraintDescription": "",
			"Description": "",
			"MaxLength": "16",
			"MinLength": "1",
			"Type": "String",
			"NoEcho": "true"
		}
	},
	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"instance": "ami-8e675ff4",
				"memcache": "ami-8e675ff4",
				"mongo": "ami-8e675ff4",
				"redis": "ami-8e675ff4"
			},
			"us-west-1": {
				"instance": "ami-8e675ff4",
				"memcache": "ami-8e675ff4",
				"mongo": "ami-8e675ff4",
				"redis": "ami-8e675ff4"
			}
		}
	},
	"Resources": {
		"vpc": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "vpcCidr"
				},
				"InstanceTenancy": "default",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-VPC"
				}]
			}
		},
		"publicSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "publicSubnetCidr"
				},
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"MapPublicIpOnLaunch": "true",
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-PUBLIC-SUBNET-1"
				}]
			}
		},
		"privateSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "privateSubnetCidr"
				},
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-PRIVATE-SUBNET-1"
				}]
			}
		},
		"inetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-INETGATEWAY"
				}]
			}
		},
		"attachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"DependsOn": ["vpc", "inetGateway"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"InternetGatewayId": {
					"Ref": "inetGateway"
				}
			}
		},
		"publicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"DependsOn": ["vpc"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-RT-PUBLIC-1"
				}]
			}
		},
		"publicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": ["inetGateway"],
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"RouteTableId": {
					"Ref": "publicRouteTable"
				},
				"GatewayId": {
					"Ref": "inetGateway"
				}
			}
		},
		"subnetRouteTableAssociationPublic": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"RouteTableId": {
					"Ref": "publicRouteTable"
				}
			}
		},
		"privateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"DependsOn": ["vpc"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-RT-PRIVATE-1"
				}]
			}
		},
		"subnetRouteTableAssociationPrivate": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"RouteTableId": {
					"Ref": "privateRouteTable"
				}
			}
		},
		"instanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"memcacheSecurityGroupIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"IpProtocol": "tcp",
				"FromPort": "11211",
				"ToPort": "11211",
				"SourceSecurityGroupName": {
					"Ref": "instanceSecurityGroup"
				}
			}
		},
		"mongoSecurityGroupIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"IpProtocol": "tcp",
				"FromPort": "27017",
				"ToPort": "27017",
				"SourceSecurityGroupName": {
					"Ref": "instanceSecurityGroup"
				}
			}
		},
		"redisSecurityGroupIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"IpProtocol": "tcp",
				"FromPort": "6380",
				"ToPort": "6380",
				"SourceSecurityGroupName": {
					"Ref": "instanceSecurityGroup"
				}
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": ["S3-EC2-Access"]
			}
		},
		"databaseSecurityGroup": {
			"Type": "AWS::RDS::DBSecurityGroup",
			"Properties": {
				"EC2VpcId": {
					"Ref": "vpc"
				},
				"DBSecurityGroupIngress": [{
					"EC2SecurityGroupName": {
						"Ref": "instanceSecurityGroup"
					}
				}],
				"GroupDescription": "Frontend Access"
			}
		},
		"databaseCluster": {
			"Type": "AWS::RDS::DBCluster",
			"Properties": {
				"Engine": "aurora",
				"BackupRetentionPeriod": "7",
				"PreferredBackupWindow": "01:00-02:00",
				"PreferredMaintenanceWindow": "mon:03:00-mon:04:00",
				"VpcSecurityGroupIds": [{
					"Ref": "databaseSecurityGroup"
				}],
				"MasterUsername": {
					"Ref": "databaseUsername"
				},
				"MasterUserPassword": {
					"Ref": "databasePassword"
				},
				"DBSubnetGroupName": {
					"Ref": "privateSubnet"
				}
			}
		},

		"databasePrimaryInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"Engine": "aurora",
				"DBClusterIdentifier": {
					"Ref": "databaseCluster"
				},
				"DBInstanceClass": {
					"Ref": "rdsInstanceType"
				},
				"DBSubnetGroupName": {
					"Ref": "privateSubnet"
				}
			}

		},
		"databaseReplicaInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"Engine": "aurora",
				"DBClusterIdentifier": {
					"Ref": "databaseCluster"
				},
				"DBInstanceClass": {
					"Ref": "rdsInstanceType"
				},
				"DBSubnetGroupName": {
					"Ref": "privateSubnet"
				}
			}
		},
		"mongoInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "This is mongo instance"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "mongo"]
				},
				"SecurityGroupIds": [{
					"Ref": "mongoSecurityGroupIngress"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"echo userdata script start\n",
							"date\n"
						]]
					}
				}
			}
		},
		"redisInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "This is redis instance"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "redis"]
				},
				"SecurityGroupIds": [{
					"Ref": "redisSecurityGroupIngress"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"echo userdata script start\n",
							"date\n"
						]]
					}
				}
			}
		},
		"memcacheInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "This is memcache instance"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "instance"]
				},
				"SecurityGroupIds": [{
					"Ref": "memcacheSecurityGroupIngress"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"echo userdata script start\n",
							"date\n"
						]]
					}
				}
			}
		},
		"webServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Node(client) with boot.sh copied from s3"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "instance"]
				},
				"SecurityGroupIds": [{
					"Ref": "instanceSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"echo userdata script start\n",
							"date\n",
							"aws s3 cp s3://hacker-rank-devops-dev/boot.sh /home/ubuntu/ --region=us-east-1\n",
							"pwd\n",
							"bash /home/ubuntu/boot.sh"
						]]
					}
				}
			}
		},
		"workerServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Node(client) with boot.sh copied from s3"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "instance"]
				},
				"SecurityGroupIds": [{
					"Ref": "instanceSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"echo userdata script start\n",
							"date\n",
							"aws s3 cp s3://hacker-rank-devops-dev/boot.sh /home/ubuntu/ --region=us-east-1\n",
							"pwd\n",
							"bash /home/ubuntu/boot.sh"
						]]
					}
				}
			}
		}
	}
}
