{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "HR-TEST-VPC-1",
	"Parameters": {
		"vpcCidr": {
			"Description": "VPC CIDR block.",
			"Type": "String",
			"Default": "10.0.0.0/26",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"publicSubnetCidr": {
			"Description": "Public subnet CIDR block.",
			"Type": "String",
			"Default": "10.0.0.0/27",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"privateSubnetCidr": {
			"Description": "Private subnet CIDR block.",
			"Type": "String",
			"Default": "10.0.0.32/27",
			"AllowedPattern": "(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})\\.(\\d{1,9})/(\\d{1,9})",
			"ConstraintDescription": "This is test"
		},
		"SSHLocation": {
			"Description": " The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
		"keyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "255",
			"AllowedPattern": "[\\x20-\\x7E]*",
			"ConstraintDescription": "can contain only ASCII characters."
		},
		"instanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.medium",
			"AllowedValues": ["t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge",
				"m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge",
				"c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge",
				"i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"DBUser": {
			"Type": "String",
			"Description": "Database admin username"
		},
		"DBPassword": {
			"Type": "String",
			"NoEcho": "true",
			"Description": "Database admin password",
			"MinLength": "8"
		},
		"DBInstanceClass": {
			"Description": "The database instance type",
			"Type": "String",
			"Default": "db.t2.small",
			"AllowedValues": [
				"db.t1.micro",
				"db.m1.small",
				"db.m1.medium",
				"db.m1.large",
				"db.m1.xlarge",
				"db.m2.xlarge",
				"db.m2.2xlarge",
				"db.m2.4xlarge",
				"db.m3.medium",
				"db.m3.large",
				"db.m3.xlarge",
				"db.m3.2xlarge",
				"db.m4.large",
				"db.m4.xlarge",
				"db.m4.2xlarge",
				"db.m4.4xlarge",
				"db.m4.10xlarge",
				"db.r3.large",
				"db.r3.xlarge",
				"db.r3.2xlarge",
				"db.r3.4xlarge",
				"db.r3.8xlarge",
				"db.m2.xlarge",
				"db.m2.2xlarge",
				"db.m2.4xlarge",
				"db.cr1.8xlarge",
				"db.t2.micro",
				"db.t2.small",
				"db.t2.medium",
				"db.t2.large"
			]
		},
		"DBName": {
			"Type": "String",
			"Description": "Database name"
		}
	},
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t1.micro": {
				"Arch": "PV64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"m1.small": {
				"Arch": "PV64"
			},
			"m1.medium": {
				"Arch": "PV64"
			},
			"m1.large": {
				"Arch": "PV64"
			},
			"m1.xlarge": {
				"Arch": "PV64"
			},
			"m2.xlarge": {
				"Arch": "PV64"
			},
			"m2.2xlarge": {
				"Arch": "PV64"
			},
			"m2.4xlarge": {
				"Arch": "PV64"
			},
			"m3.medium": {
				"Arch": "HVM64"
			},
			"m3.large": {
				"Arch": "HVM64"
			},
			"m3.xlarge": {
				"Arch": "HVM64"
			},
			"m3.2xlarge": {
				"Arch": "HVM64"
			},
			"c1.medium": {
				"Arch": "PV64"
			},
			"c1.xlarge": {
				"Arch": "PV64"
			},
			"c3.large": {
				"Arch": "HVM64"
			},
			"c3.xlarge": {
				"Arch": "HVM64"
			},
			"c3.2xlarge": {
				"Arch": "HVM64"
			},
			"c3.4xlarge": {
				"Arch": "HVM64"
			},
			"c3.8xlarge": {
				"Arch": "HVM64"
			},
			"g2.2xlarge": {
				"Arch": "HVMG2"
			},
			"r3.large": {
				"Arch": "HVM64"
			},
			"r3.xlarge": {
				"Arch": "HVM64"
			},
			"r3.2xlarge": {
				"Arch": "HVM64"
			},
			"r3.4xlarge": {
				"Arch": "HVM64"
			},
			"r3.8xlarge": {
				"Arch": "HVM64"
			},
			"i2.xlarge": {
				"Arch": "HVM64"
			},
			"i2.2xlarge": {
				"Arch": "HVM64"
			},
			"i2.4xlarge": {
				"Arch": "HVM64"
			},
			"i2.8xlarge": {
				"Arch": "HVM64"
			},
			"hi1.4xlarge": {
				"Arch": "HVM64"
			},
			"hs1.8xlarge": {
				"Arch": "HVM64"
			},
			"cr1.8xlarge": {
				"Arch": "HVM64"
			},
			"cc2.8xlarge": {
				"Arch": "HVM64"
			}
		},

		"AWSRegionArch2AMI": {
			"us-east-1": {
				"PV64": "ami-50842d38",
				"HVM64": "ami-08842d60",
				"HVMG2": "ami-3a329952"
			},
			"us-west-2": {
				"PV64": "ami-af86c69f",
				"HVM64": "ami-8786c6b7",
				"HVMG2": "ami-47296a77"
			},
			"us-west-1": {
				"PV64": "ami-c7a8a182",
				"HVM64": "ami-cfa8a18a",
				"HVMG2": "ami-331b1376"
			},
			"eu-west-1": {
				"PV64": "ami-aa8f28dd",
				"HVM64": "ami-748e2903",
				"HVMG2": "ami-00913777"
			},
			"ap-southeast-1": {
				"PV64": "ami-20e1c572",
				"HVM64": "ami-d6e1c584",
				"HVMG2": "ami-fabe9aa8"
			},
			"ap-northeast-1": {
				"PV64": "ami-21072820",
				"HVM64": "ami-35072834",
				"HVMG2": "ami-5dd1ff5c"
			},
			"ap-southeast-2": {
				"PV64": "ami-8b4724b1",
				"HVM64": "ami-fd4724c7",
				"HVMG2": "ami-e98ae9d3"
			},
			"sa-east-1": {
				"PV64": "ami-9d6cc680",
				"HVM64": "ami-956cc688",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-north-1": {
				"PV64": "ami-a857c591",
				"HVM64": "ami-ac57c595",
				"HVMG2": "NOT_SUPPORTED"
			},
			"eu-central-1": {
				"PV64": "ami-a03503bd",
				"HVM64": "ami-b43503a9",
				"HVMG2": "ami-b03503ad"
			}
		}
	},
	"Resources": {
		"vpc": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "vpcCidr"
				},
				"InstanceTenancy": "default",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-VPC"
				}]
			}
		},
		"publicSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "publicSubnetCidr"
				},
				"AvailabilityZone": "us-east-1a",
				"MapPublicIpOnLaunch": "true",
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-PUBLIC-SUBNET-1"
				}]
			}
		},
		"privateSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "privateSubnetCidr"
				},
				"AvailabilityZone": "us-east-1b",
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-PRIVATE-SUBNET-1"
				}]
			}
		},
		"inetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-INETGATEWAY"
				}]
			}
		},
		"attachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"DependsOn": ["vpc", "inetGateway"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"InternetGatewayId": {
					"Ref": "inetGateway"
				}
			}
		},
		"publicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"DependsOn": ["vpc"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-RT-PUBLIC-1"
				}]
			}
		},
		"publicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": ["inetGateway"],
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"RouteTableId": {
					"Ref": "publicRouteTable"
				},
				"GatewayId": {
					"Ref": "inetGateway"
				}
			}
		},
		"subnetRouteTableAssociationPublic": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"RouteTableId": {
					"Ref": "publicRouteTable"
				}
			}
		},
		"privateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"DependsOn": ["vpc"],
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "TEST-HR-RT-PRIVATE-1"
				}]
			}
		},
		"subnetRouteTableAssociationPrivate": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"RouteTableId": {
					"Ref": "privateRouteTable"
				}
			}
		},
		"NATGatewayEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"NATGateway": {
			"Type": "AWS::EC2::NatGateway",
			"DependsOn": "attachGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"NATGatewayEIP",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "publicSubnet"
				}
			}
		},
		"privateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "privateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NATGateway"
				}
			}
		},
		"instanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"dbSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpc"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "11211",
						"ToPort": "11211",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
        },
		"EC2S3Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "root",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
								"Action": "ec2:*",
								"Effect": "Allow",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "elasticloadbalancing:*",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "cloudwatch:*",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "autoscaling:*",
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": "iam:CreateServiceLinkedRole",
								"Resource": "*",
								"Condition": {
									"StringEquals": {
										"iam:AWSServiceName": [
											"autoscaling.amazonaws.com",
											"ec2scheduled.amazonaws.com",
											"elasticloadbalancing.amazonaws.com",
											"spot.amazonaws.com",
											"spotfleet.amazonaws.com"
										]
									}
								}
							},
							{
								"Effect": "Allow",
								"Action": "s3:*",
								"Resource": "*"
							}
						]
					}
				}]
			}
		},
		"EC2S3InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "EC2S3Role"
				}]
			}
		},
		"webServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Node(client) with boot.sh copied from s3"
			},
			"Properties": {
				"ImageId": "ami-8e675ff4",
				"SecurityGroupIds": [{
					"Ref": "instanceSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "EC2S3InstanceProfile"
				},
				"Tags": [{
						"Key": "Environment",
						"Value": "production"
					},
					{
						"Key": "Name",
						"Value": "node3"
					},
					{
						"Key": "Role",
						"Value": "webserver"
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n"

						]]
					}
				}
			}
		},
		"workerServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Node(client) with boot.sh copied from s3"
			},
			"Properties": {
				"ImageId": "ami-8e675ff4",
				"SecurityGroupIds": [{
					"Ref": "instanceSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "publicSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"IamInstanceProfile": {
					"Ref": "EC2S3InstanceProfile"
				},
				"Tags": [{
						"Key": "Environment",
						"Value": "production"
					},
					{
						"Key": "Name",
						"Value": "worker2"
					},
					{
						"Key": "Role",
						"Value": "workerserver"
					},
					{
						"Key": "Datadog",
						"Value": "on"
					},
					{
						"Key": "Owner",
						"Value": "hackerrank"
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n"

						]]
					}
				}
			}
		},
		"dbServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"Comment": "Node(client) with boot.sh copied from s3"
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["AWSRegionArch2AMI", {
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": ["AWSInstanceType2Arch", {
								"Ref": "instanceType"
							}, "Arch"]
						}
					]
				},
				"SecurityGroupIds": [{
					"Ref": "dbSecurityGroup"
				}],
				"SubnetId": {
					"Ref": "privateSubnet"
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "keyName"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "database"
				}]
			}
		},
		"MYRDSDB": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"AllocatedStorage": "100",
				"DBInstanceClass": {
					"Ref": "DBInstanceClass"
				},
				"Engine": "MySQL",
				"EngineVersion": "5.5",
				"MasterUsername": {
					"Ref": "DBUser"
				},
				"MasterUserPassword": {
					"Ref": "DBPassword"
				},
				"DBName": {
					"Ref": "DBName"
				}
			}
		}
	}
}